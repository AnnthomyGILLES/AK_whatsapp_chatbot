version: '3'

services:
  fastapi:
    build: .
    container_name: chatbot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGODB_HOST: mongodb
    volumes:
      - appdata:/app
#      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - mongodb
    networks:
      - backend
      - traefik-public
    ports:
      - "5000:5000"
#      - "443:443"

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    command: ["--bind_ip_all"]
    env_file: [.env-mongo, .env]
    ports:
      - "27017:27017"
    volumes:
      - mongodbdata:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend

#  webserver:
#    image: nginx:latest
#    container_name: webserver
#    restart: unless-stopped
#    ports:
#      - "80:80"
#      - "8443:443"
#    volumes:
#      - nginxdata:/var/log/nginx
#      - /etc/letsencrypt:/etc/letsencrypt
#    depends_on:
#      - fastapi
#    networks:
#      - frontend

  backend:
    build: ./
    restart: always
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.backend.entrypoints=http
      - traefik.http.routers.backend.rule=Host(`pay.whatia.fr`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.backend.entrypoints=https
      - traefik.http.routers.backend.rule=Host(`pay.whatia.fr`)
      - traefik.http.routers.backend.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.backend.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.backend.middlewares=https-redirect
      - traefik.http.routers.backend.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  backend:
    driver: bridge
  traefik-public:
    external: true

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local