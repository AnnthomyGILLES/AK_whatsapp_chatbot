version: '3'

services:
  flask:
    build: .
    container_name: chatbot
#    restart: unless-stopped
#    env_file:
#      - .env
    environment:
      MONGODB_DATABASE: mydatabase
      MONGODB_USERNAME: ak_flaskuser
      MONGODB_PASSWORD: dQO0NmVMUr0U
      MONGODB_HOSTNAME: mongodb
    volumes:
      - appdata:/app
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend
    ports:
      - "5000:5000"

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
#    command: sh -c 'mongod --auth && /docker-entrypoint-initdb.d/init-mongo.sh'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ak_root
      MONGO_INITDB_ROOT_PASSWORD: s7LEOI5ugKmlXTPv
      MONGO_INITDB_DATABASE: mydatabase
      MONGODB_USERNAME: ak_flaskuser
      MONGODB_PASSWORD: dQO0NmVMUr0U
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
#    env_file:
#      - .env
#      - .mongodb.env
    ports:
      - "27017:27017"
    volumes:
      - mongodbdata:/data/db
#      - ./mongo-init:/docker-entrypoint-initdb.d
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backend
#    entrypoint: [ "/usr/bin/mongod", "--auth", "--config", "/etc/mongod.conf", "--bind_ip_all", "--replSet", "rs0" ]

  webserver:
    image: nginx:latest
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local